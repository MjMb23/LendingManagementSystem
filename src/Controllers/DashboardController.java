package Controllers;import Connection.ConnectionClass;import Models.*;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.event.ActionEvent;import javafx.event.EventHandler;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.fxml.Initializable;import javafx.geometry.Insets;import javafx.geometry.Pos;import javafx.scene.Node;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.*;import javafx.scene.control.cell.PropertyValueFactory;import javafx.scene.input.KeyEvent;import javafx.scene.input.MouseEvent;import javafx.scene.layout.*;import javafx.scene.paint.Color;import javafx.scene.text.Font;import javafx.scene.text.FontPosture;import javafx.scene.text.FontWeight;import javafx.scene.text.Text;import javafx.stage.Stage;import java.net.URL;import java.sql.ResultSet;import java.text.NumberFormat;import java.time.DayOfWeek;import java.time.LocalDate;import java.util.ArrayList;import java.util.ResourceBundle;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;public class DashboardController implements Initializable {    @FXML    private ScrollPane dashboardContainer;    @FXML    private HBox servicesContainer;    //USER NODES    @FXML    private HBox userContainer;    @FXML    private ComboBox<String> userEmployeeComboBox;    @FXML    private TextField usernameField;    @FXML    private TextField passwordField;    @FXML    private RadioButton adminRadioButton;    @FXML    private Button userSaveButton;    @FXML    private Button userUpdateButton;    @FXML    private Button userDeactivateButton;    @FXML    private TableView<UserAccount> userTable;    @FXML    private TableColumn<UserAccount, Integer> userIDColumn;    @FXML    private TableColumn<UserAccount, String> userFullnameColumn;    @FXML    private TableColumn<UserAccount, String> usernameColumn;    @FXML    private TableColumn<UserAccount, String> passwordColumn;    @FXML    private TableColumn<UserAccount, Boolean> userAdminColumn;    //SERVICES NODES    @FXML    private HBox employeesContainer1;    @FXML    private TextField servicesLoanDescription;    @FXML    private TextField servicesInterestRate;    @FXML    private TextField servicesPenaltyRate;    @FXML    private ComboBox<String> servicesStatusComboBox;    @FXML    private Button servicesSaveButton;    @FXML    private Button servicesUpdateButton;    @FXML    private Button servicesDeleteButton;    @FXML    private TableView<LoanType> servicesTable;    @FXML    private TableColumn<LoanType, Integer> servicesLoanTypeIDColumn;    @FXML    private TableColumn<LoanType, String> servicesDescriptionColumn;    @FXML    private TableColumn<LoanType, Float> servicesInterestRateColumn;    @FXML    private TableColumn<LoanType, Float> servicesPenaltyRateColumn;    @FXML    private TableColumn<LoanType, String> servicesStatusColumn;    //EMPLOYEE NODES    @FXML    private HBox employeesContainer;    @FXML    private TextField employeeLastname;    @FXML    private TextField employeeFirstname;    @FXML    private TextField employeeMiddlename;    @FXML    private TextField employeeAddress;    @FXML    private TextField employeeContactNumber;    @FXML    private ComboBox<String> employeePositionComboBox;    @FXML    private Button employeeSaveButton;    @FXML    private Button employeeUpdateButton;    @FXML    private Button employeeDeleteButton;    @FXML    private TableView<Employee> employeeTable;    @FXML    private TableColumn<Employee, Integer> employeeIDColumn;    @FXML    private TableColumn<Employee, String> employeeLastnameColumn;    @FXML    private TableColumn<Employee, String> employeeFirstnameColumn;    @FXML    private TableColumn<Employee, String> employeeMiddleNameColumn;    @FXML    private TableColumn<Employee, String> employeeAddressColumn;    @FXML    private TableColumn<Employee, String> employeeContactColumn;    @FXML    private TableColumn<Employee, String> employeePositionColumn;    //TRANSACTION NODES    @FXML    private VBox containerVbox;    @FXML    private ScrollPane transactionScrollPane;    @FXML    private HBox transactionNavigation;    //LOANS NODES    @FXML    private ScrollPane loansBox;    @FXML    private VBox createAccountVBox;    @FXML    private TextField lastnameField;    @FXML    private TextField firstnameField;    @FXML    private TextField middlenameField;    @FXML    private TextField addressField;    @FXML    private TextField contactNumberField;    @FXML    private TextField loanAmountField;    @FXML    private ComboBox<String> loanTypeComboBox;    @FXML    private ComboBox<String> employeeAssignedCombobox;    @FXML    private TextField loanTermValueField;    @FXML    private ComboBox<String> loanTermCombobox;    @FXML    private DatePicker dueDateDatePicker;    @FXML    private ComboBox<String> frequencyCombobox;    @FXML    private CheckBox sundaysCheckBox;    @FXML    private TextField rateField;    @FXML    private Button calculateButton;    @FXML    private TextField totalAmountField;    @FXML    private TextField paymentPerFrequencyField;    @FXML    private Button saveButton;    @FXML    private Button cancelButton;    @FXML    private Button saveAndReleaseButton;    @FXML    private ComboBox<String> searchFilterComboBox;    @FXML    private TextField searchForField;    @FXML    private Button searchButton;    @FXML    private ComboBox<String> showStatusComboBox;    @FXML    private TableView<Loan_Account> accountsTable;    @FXML    private TableColumn<Loan_Account, Integer> loanIdColumn;    @FXML    private TableColumn<Loan_Account, String> loanClientNameColumn;    @FXML    private TableColumn<Loan_Account, String> loanTypeColumn;    @FXML    private TableColumn<Loan_Account, Double> loanPrincipalColumn;    @FXML    private TableColumn<Loan_Account, Float> loanRateColumn;    @FXML    private TableColumn<Loan_Account, Integer> loanTermColumn;    @FXML    private TableColumn<Loan_Account, Double> loanTotalColumn;    @FXML    private TableColumn<Loan_Account, Double> loanPenaltyColumn;    @FXML    private TableColumn<Loan_Account, Double> loanBalanceColumn;    @FXML    private TableColumn<Loan_Account, Object> loanReleaseDateColumn;    @FXML    private TableColumn<Loan_Account, Object> loanDueDateColumn;    @FXML    private TableColumn<Loan_Account, Double> loanScheduledAmountColumn;    @FXML    private TableColumn<Loan_Account, Object> loanPaymentDate;    @FXML    private TableColumn<Loan_Account, String> loanStatusColumn;    @FXML    private TableColumn<Loan_Account, String> loanAssignedColumn;    @FXML    private TableColumn<Loan_Account, String> loanReceiverColumn;    @FXML    private Button editButton;    @FXML    private Button viewLedgerButton;    @FXML    private Button approveButton;    @FXML    private Button declineButton;    @FXML    private Button releaseButton;    @FXML    private Button renewButton;    @FXML    private Button deleteButton;    @FXML    private Button blockButton;    //NAVIGATION NODES    @FXML    private Text UserCompletenameText;    @FXML    private Text UsernameText;    @FXML    private Text PosistionText;    @FXML    private Button dashboardButton;    @FXML    private Button remindersButton;    @FXML    private Button loansButton;    @FXML    private Button customersButton;    @FXML    private Button employeesButton;    @FXML    private Button servicesButton;    @FXML    private Button userAccountsButton;    @FXML    private Button reportsButton;    @FXML    private Label CompanyNameText;    //DASHBOARD NODES    @FXML    private CheckBox IncludeSundaysCheckBox;    @FXML    private Text paymentPerFrequencyLabel;    @FXML    private Button logoutButton;    @FXML    private Button transactionsButton;    @FXML    private Text titleText;    @FXML    private HBox dashboard;    @FXML    private Button forApprovalButton;    @FXML    private Button approvedButton;    @FXML    private Button activeButton;    @FXML    private Button overdueButton;    @FXML    private Button settledButton;    @FXML    private Button blockedButton;    @FXML    private Text collectionsDateToday;    @FXML    private Text collectionsTodayTotal;    @FXML    private Text collectionsDateYesterday;    @FXML    private Text collectionsTotalYesterday;    @FXML    private Text collectionsDateThisWeek;    @FXML    private Text collectionsThisWeekTotal;    @FXML    private Text forApprovalCount;    @FXML    private Text approvedCount;    @FXML    private Text activeCount;    @FXML    private Text overdueCount;    @FXML    private Text settledCount;    @FXML    private Text blockedCount;    @FXML    private Text collectionsMonth;    @FXML    private Text collectionsThisMonthTotal;    @FXML    private Text collectionsThisYear;    @FXML    private Text collectionsThisYearTotal;    @FXML    private Text releaseTodayDate;    @FXML    private Text releaseTodayTotal;    @FXML    private Text releaseYesterdayDate;    @FXML    private Text releaseYesterdayTotal;    @FXML    private Text releaseThisWeekDate;    @FXML    private Text releaseThisWeekTotal;    @FXML    private Text releaseThisMonth;    @FXML    private Text releaseThisMonthTotal;    @FXML    private Text releaseThisYear;    @FXML    private Text releaseThisYearTotal;    @FXML    private Text expensesTodayDate;    @FXML    private Text expensesTodayTotal;    @FXML    private Text expensesYesterdayDate;    @FXML    private Text expensesYesterdayTotal;    @FXML    private Text expensesThisWeekDate;    @FXML    private Text expensesThisWeekTotal;    @FXML    private Text expensesThisMonth;    @FXML    private Text expensesThisMonthTotal;    @FXML    private Text expensesThisYear;    @FXML    private Text expensesThisYearTotal;    @FXML    private TextField simulatorLoanAmountField;    @FXML    private ComboBox<String> simulatorLoanTypeCombobox;    @FXML    private ComboBox<String> simulatorFrequencyCombobox;    @FXML    private TextField simulatorInterestRateField;    @FXML    private TextField simulatorLoanTermField;    @FXML    private ComboBox<String> simulatorLoanTermCombobox;    @FXML    private Button simulatorCalculateButton;    @FXML    private TextField simulatorPaymentField;    @FXML    private TextField simulatorTotalAmountField;    @FXML    private TableView<Due> dueTodayTable;    @FXML    private TableColumn<Due, String> dueTodayNameColumn;    @FXML    private TableColumn<Due, String> dueTodayCollectorColumn;    @FXML    private TableView<Due> dueTomorrowTable;    @FXML    private TableColumn<Due, String> dueTomorrowNameColumn;    @FXML    private TableColumn<Due, String> dueTomorrowCollectorColumn;    @FXML    private TableView<Due> dueThisWeekTable;    @FXML    private TableColumn<Due, String> dueThisWeekNameColumn;    @FXML    private TableColumn<Due, String> dueThisWeekCollectorColumn;    //NAVIGATION ACTION EVENTS    @FXML    void remindersButtonClicked(ActionEvent event) {    }    @FXML    void userAccountsButtonClicked(ActionEvent event) {        switchTabs(userContainer,"USER ACCOUNTS");        populateUserTable();    }    @FXML    void servicesButtonClicked(ActionEvent event) {        switchTabs(servicesContainer,"SERVICES");        populateServicesTable();    }    @FXML    void transactionsButtonClicked(ActionEvent event) {        switchTabs(transactionScrollPane,"USER ACCOUNTS");        transactionNavigation.setVisible(true);        reloadVboxContainer();    }    @FXML    void dashboardButtonClicked(ActionEvent event) {        switchTabs(dashboardContainer,"DASHBOARD");        updateDashboard();        populateSimulator();        simulatorLoanTypeCombobox.getSelectionModel().select(1);    }    @FXML    void employeesButtonClicked(ActionEvent event) {        switchTabs(employeesContainer,"EMPLOYEE");        populateEmployeeTable();    }    @FXML    void forApprovalButtonClicked(ActionEvent event) {    }    @FXML    void loansButtonClicked(ActionEvent event) {        switchTabs(loansBox,"LOAN ACCOUNTS");        populateLoansTable();        setDefaultsValues();        setLoansDefaults();    }    @FXML    void logoutButtonClicked(ActionEvent event) {    }    //LOANS EVENTS    @FXML    void approveButtonClicked(ActionEvent event) {        approveSelectedAccount(selectedLoanId);        populateLoansTable();    }    @FXML    void accountsTableSelected(MouseEvent event) {        this.setUpdating(false);        enableAccountCreationButtons();        getSelectedItems();        fetchDataOnSelectedRow();        disableAccountCreationButtons();        disableAccountControls();        cancelButton.setDisable(false);    }    @FXML    void accountTableKeyPressed(KeyEvent event) {        disableAccountCreationButtons();        getSelectedItems();        disableAccountControls();    }    @FXML    void loanTermValueFieldEnterKeyPressed(ActionEvent event) {    }    @FXML    void blockButtonClicked(ActionEvent event) {        blockSelectedAccount(selectedLoanId);        populateLoansTable();    }    @FXML    void declineButtonClicked(ActionEvent event) {        declineSelectedAccount(selectedLoanId);        populateLoansTable();    }    @FXML    void deleteButtonClicked(ActionEvent event) {        deleteSelectedAccount(selectedLoanId);        Notifications deleteSuccessful=new Notifications("Operation Successful!","The account was deleted successfully.");        deleteSuccessful.showInformation();        populateLoansTable();    }    @FXML    void editButtonClicked(ActionEvent event) {        this.setUpdating(true);        fetchDataOnSelectedRow();        enableAccountCreationButtons();        disableAccountControls();        createAccountVBox.setDisable(false);    }    @FXML    void cancelButtonClicked(ActionEvent event) {        this.setUpdating(false);        cancelButton.setDisable(true);        createAccountVBox.setDisable(false);        setLoansDefaults();        enableAccountCreationButtons();    }    @FXML    void releaseButtonClicked(ActionEvent event) {        releaseLoanAccount();        populateLoansTable();    }    @FXML    void renewButtonClicked(ActionEvent event) {        createAccountVBox.setDisable(false);        enableAccountCreationButtons();    }    @FXML    void saveAndReleaseButtonClicked(ActionEvent event) {        saveAndReleaseAccount();        populateLoansTable();        setLoansDefaults();    }    @FXML    void saveButtonClicked(ActionEvent event) {        if(this.isUpdating()==true){            updateAccount();            saveButton.setText("Save");            setLoansDefaults();        }else{            saveAccount();            setLoansDefaults();        }        this.setUpdating(false);        populateLoansTable();    }    @FXML    void searchButtonClicked(ActionEvent event) {        searchAccount(searchFilterComboBox.getValue(),searchForField.getText(),showStatusComboBox.getValue());    }    @FXML    void searchFilterComboBoxChanged(ActionEvent event) {        searchAccount(searchFilterComboBox.getValue(),searchForField.getText(),showStatusComboBox.getValue());    }    @FXML    void loanTypeComboBoxSelectionChanged(ActionEvent event) {        rateField.setText(getRate(loanTypeComboBox.getValue())+"");    }    @FXML    void searForFieldEnterPressed(ActionEvent event) {        searchAccount(searchFilterComboBox.getValue(),searchForField.getText(),showStatusComboBox.getValue());    }    @FXML    void SearchForKeyPressed(KeyEvent event) {        searchAccount(searchFilterComboBox.getValue(),searchForField.getText(),showStatusComboBox.getValue());    }    @FXML    void showStatusComboBoxChanged(ActionEvent event) {        if(showStatusComboBox.getValue().equals("all")){            populateLoansTable();        }else{            filterStatus(showStatusComboBox.getValue());        }    }    @FXML    void calculateButtonClicked(ActionEvent event) {        calculate();    }    @FXML    void viewLedgerButtonClicked(ActionEvent event) {        Stage ledger = new Stage();        try{            Parent root = FXMLLoader.load(getClass().getResource("../Views/Ledger.fxml"));            ledger.setTitle("Individual Ledger");            ledger.setScene(new Scene(root));            ledger.setMaximized(true);            ledger.show();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }    }    //DASHBOARD EVENTS    @FXML    void approvedButtonClicked(ActionEvent event) {    }    @FXML    void simulatorLoanTypeComboboxChanged(ActionEvent event) {        simulatorInterestRateField.setText(getRate(simulatorLoanTypeCombobox.getValue())+"");    }    @FXML    void simulatorCalculateButtonClicked(ActionEvent event) {        simulate();    }    @FXML    void activeButtonClicked(ActionEvent event) {    }    @FXML    void blockedButtonClicked(ActionEvent event) {    }    @FXML    void customersButtonClicked(ActionEvent event) {    }    @FXML    void overdueButton(ActionEvent event) {    }    @FXML    void reportsButtonClicked(ActionEvent event) {    }    @FXML    void settledButtonClicked(ActionEvent event) {    }    //SERVICES EVENTS    @FXML    void servicesDeleteButtonClicked(ActionEvent event) {    }    @FXML    void servicesSaveButtonClicked(ActionEvent event) {    }    @FXML    void servicesTableClicked(MouseEvent event) {        getSelectedService();    }    @FXML    void servicesUpdateButtonClicked(ActionEvent event) {    }    //USER EVENTS    @FXML    void userDeactivateButtonClicked(ActionEvent event) {    }    @FXML    void userSaveButtonClicked(ActionEvent event) {    }    @FXML    void userTableClicked(MouseEvent event) {        getSelectedUser();        employeePositionComboBox.setDisable(true);    }    @FXML    void userUpdateButtonClicked(ActionEvent event) {    }    //VARIABLE DECLARATIONS***************************************************************************************************************    private ResultSet rs;    private int selectedLoanId;    private String selectedLoanStatus;    private Loan_Account selectedAccount=new Loan_Account();    private LocalDate due=LocalDate.now();    private LocalDate releaseDate=LocalDate.now();    private int selectedClientID;    private int selectedEmployeeID;    private int selectedServiceID;    private int selectedUserID;    private boolean isUpdating=false;    private String selectedLoanType;    private Calculation simulate;    private Notifications success, error, confirm, info, warning;    private ArrayList<Node> containers = new ArrayList<>();    private Transaction transaction;    //NAVIGATION METHODS    private void switchTabs(Node container,String title){        for(Node cont : containers){            if(cont.isVisible()){                cont.setVisible(false);            }        }        container.setVisible(true);        titleText.setText(title);    }    private void addNodes(){        containers.add(dashboardContainer);        containers.add(transactionNavigation);        containers.add(loansBox);        containers.add(userContainer);        containers.add(transactionScrollPane);        containers.add(employeesContainer);        containers.add(servicesContainer);    }        //LOANS METHODS    private void populateLoansTable() {        ObservableList<Loan_Account> accounts= FXCollections.observableArrayList();        ResultSet rs;        UserAccount user=new UserAccount();        Loan_Account account=new Loan_Account();        String username;        try{            ConnectionClass getAccounts=new ConnectionClass();            rs=getAccounts.select("select loan_account.id, client.first_name, client.last_name, loan_type.description, loan_account.principal, loan_account.interest, loan_account.loan_term,\n" +                    "loan_account.due_amount, loan_account.penalty, loan_account.balance, loan_account.release_date, loan_account.due_date, loan_account.scheduled_amount,\n" +                    "loan_account.next_schedule, loan_account.status, concat(employee.first_name,' ',employee.last_name) as employee_full_name, loan_account.User_account_id\n " +                    "from lending_management_system.loan_account\n" +                    "join lending_management_system.client\n" +                    "on loan_account.Client_id=client.id\n" +                    "join lending_management_system.loan_type\n" +                    "on loan_account.Loan_Type_id=loan_type.id\n" +                    "join lending_management_system.employee\n" +                    "on client.Employee_id=employee.id\n" +                    "join lending_management_system.user_account\n" +                    "on user_account.Employee_id=employee.id " +                    "order by release_date desc;");            while(rs.next()){                Loan_Account accountToList=new Loan_Account();                accountToList.setId(rs.getInt("id"));                accountToList.setFirstName(rs.getString("first_name"));                accountToList.setLastName(rs.getString("last_name"));                accountToList.setFullName(accountToList.getFirstName()+" "+accountToList.getLastName());                accountToList.setLoanDescription(rs.getString("description"));                accountToList.setPrincipal(rs.getDouble("principal"));                accountToList.setInterest(rs.getDouble("interest"));                accountToList.setLoanTerm(rs.getInt("loan_term"));                accountToList.setAmount(rs.getDouble("due_amount"));                accountToList.setPenalty(rs.getDouble("penalty"));                accountToList.setBalance(rs.getDouble("balance"));                if(rs.getDate("release_date")==null){                    accountToList.setReleaseDate("--------");                }                else{                    accountToList.setReleaseDate(rs.getDate("release_date").toLocalDate());                }                if(rs.getDate("due_date")==null){                    accountToList.setDueDate("--------");                }                else{                    accountToList.setDueDate(rs.getDate("due_date").toLocalDate());                }                accountToList.setScheduledAmount(rs.getDouble("scheduled_amount"));                if(rs.getDate("next_schedule")==null){                    accountToList.setNextSchedule("--------");                }                else{                    accountToList.setNextSchedule(rs.getDate("next_schedule").toLocalDate());                }                accountToList.setStatus(rs.getString("status"));                accountToList.setAssignedEmployee(rs.getString("employee_full_name"));                user.setId(rs.getInt("User_account_id"));                accountToList.setReceiverUser(user.getUserName(user.getId()));                accounts.add(accountToList);            }            getAccounts.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        loanIdColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Integer>("id"));        loanClientNameColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("fullName"));        loanTypeColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("loanDescription"));        loanPrincipalColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("principal"));        loanRateColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Float>("interest"));        loanTermColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Integer>("loanTerm"));        loanTotalColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("amount"));        loanPenaltyColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("penalty"));        loanBalanceColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("balance"));        loanReleaseDateColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Object>("releaseDate"));        loanDueDateColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Object>("dueDate"));        loanScheduledAmountColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("scheduledAmount"));        loanPaymentDate.setCellValueFactory(new PropertyValueFactory<Loan_Account, Object>("nextSchedule"));        loanStatusColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("status"));        loanAssignedColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("assignedEmployee"));        loanReceiverColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("receiverUser"));        accountsTable.setItems(accounts);    }    private void calculate(){        NumberFormat myFormat = NumberFormat.getInstance();        myFormat.setGroupingUsed(true);        simulate=new Calculation(Double.parseDouble(loanAmountField.getText()),loanTypeComboBox.getValue(),frequencyCombobox.getValue()+"",sundaysCheckBox.isSelected(),Double.parseDouble(rateField.getText())/100,Integer.parseInt(loanTermValueField.getText()),loanTermCombobox.getValue());        totalAmountField.setText("₱"+myFormat.format(simulate.getTotalAmount()));        paymentPerFrequencyField.setText("₱"+myFormat.format(simulate.getPaymentPerFrequency())+" "+simulate.getPaymentFrequency());        dueDateDatePicker.setValue(simulate.getDueDate());    }    private int getRate(String loanType){        int percentage=0;        float rate;        try{            ConnectionClass getPercetage=new ConnectionClass();            rs=getPercetage.select(String.format("select loan_type.rate\n" +                    "from lending_management_system.loan_type\n" +                    "where loan_type.description = '%s';",loanType));            while(rs.next()){                percentage= (int) (rs.getFloat("rate")*100);            }        }catch (Exception e){            Notifications error=new Notifications("Error",e.getMessage());            error.showError();            System.out.println(e.getMessage());            e.printStackTrace();        }        return percentage;    }    private void saveAccount(){        LoanType type=new LoanType();        Employee employee=new Employee();        UserAccount activeUser=new UserAccount();        int employeeID=employee.getEmployeeID(employeeAssignedCombobox.getValue());        String employeeName=employee.getEmployeeName(employeeID);        int userActiveID=activeUser.getUserId(UsernameText.getText());        int empID=employee.getEmployeeID(employeeName);        int loanTypeID=type.getLoanTypeId(loanTypeComboBox.getValue());        Calculation simulate=new Calculation(Double.parseDouble(loanAmountField.getText()),loanTypeComboBox.getValue(),frequencyCombobox.getValue(),sundaysCheckBox.isSelected(),Double.parseDouble(rateField.getText())/100,Integer.parseInt(loanTermValueField.getText()),loanTermCombobox.getValue());        calculate();        Client insertClient= new Client(0,employeeID,lastnameField.getText(),firstnameField.getText(), middlenameField.getText(), addressField.getText(), contactNumberField.getText(), "for approval");        int id=insertClient.getCustomerID(firstnameField.getText(),lastnameField.getText(), middlenameField.getText());        LocalDate date=LocalDate.now();        Loan_Account sample=new Loan_Account(false,0,loanTypeID, empID, id,insertClient.getLastName(),insertClient.getFirstName(),insertClient.getMiddleName(),insertClient.getAddress(),insertClient.getContactNumber(), loanTypeComboBox.getValue()+"",Double.parseDouble(loanAmountField.getText()),Double.parseDouble(rateField.getText())/100, date, frequencyCombobox.getValue(),sundaysCheckBox.isSelected(), dueDateDatePicker.getValue(), Integer.parseInt(loanTermValueField.getText()), simulate.getTotalAmount(), simulate.getTotalAmount(),0,"for approval",date,simulate.getPaymentPerFrequency(), employeeName, UsernameText.getText(), userActiveID);    }    private void saveAndReleaseAccount(){        LoanType type=new LoanType();        Employee employee=new Employee();        UserAccount activeUser=new UserAccount();        int employeeID=employee.getEmployeeID(employeeAssignedCombobox.getValue());        String employeeName=employee.getEmployeeName(employeeID);        int userActiveID=activeUser.getUserId(UsernameText.getText());        int empID=employee.getEmployeeID(employeeName);        int loanTypeID=type.getLoanTypeId(loanTypeComboBox.getValue());        Calculation simulate=new Calculation(Double.parseDouble(loanAmountField.getText()),loanTypeComboBox.getValue(),frequencyCombobox.getValue(),sundaysCheckBox.isSelected(),Double.parseDouble(rateField.getText())/100,Integer.parseInt(loanTermValueField.getText()),loanTermCombobox.getValue());        Client insertClient= new Client(0,employeeID,lastnameField.getText(),firstnameField.getText(), middlenameField.getText(), addressField.getText(), contactNumberField.getText(), "active");        int id=insertClient.getCustomerID(firstnameField.getText(),lastnameField.getText(), middlenameField.getText());        LocalDate date=LocalDate.now();        Loan_Account sample=new Loan_Account(true,0,loanTypeID, empID, id,insertClient.getLastName(),insertClient.getFirstName(),insertClient.getMiddleName(),insertClient.getAddress(),insertClient.getContactNumber(), loanTypeComboBox.getValue()+"",Double.parseDouble(loanAmountField.getText()),Double.parseDouble(rateField.getText())/100, date, frequencyCombobox.getValue(),sundaysCheckBox.isSelected(), dueDateDatePicker.getValue(), Integer.parseInt(loanTermValueField.getText()), simulate.getTotalAmount(), simulate.getTotalAmount(),0,"active",simulate.getNextSchedule(),simulate.getPaymentPerFrequency(), employeeName, UsernameText.getText(),userActiveID);    }    private void populateLoansChoices(){        ResultSet type;        ResultSet rs;        LocalDate due=LocalDate.now();        ObservableList<String> employeeList=FXCollections.observableArrayList();        ObservableList<String> statusFilter=FXCollections.observableArrayList();        statusFilter.add("all");        statusFilter.add("active");        statusFilter.add("blocked");        statusFilter.add("for approval");        statusFilter.add("approved");        statusFilter.add("settled");        statusFilter.add("overdue");        statusFilter.add("declined");        ObservableList<String> searchFilter=FXCollections.observableArrayList();        searchFilter.add("Firstname");        searchFilter.add("Lastname");        searchFilter.add("Assigned");        searchFilter.add("Receiver");        ObservableList<String> paymentFrequency = FXCollections.observableArrayList();        paymentFrequency.add("Daily");        paymentFrequency.add("Weekly");        //paymentFrequency.add("Fortnightly");        //paymentFrequency.add("Monthly");        ObservableList<String> termMeasure=FXCollections.observableArrayList();        termMeasure.add("Month/s");        ObservableList<String> loanType=FXCollections.observableArrayList();        try{            ConnectionClass conn=new ConnectionClass();            rs=conn.select("SELECT concat(employee.first_name,' ', employee.last_name) as employee_full_name FROM lending_management_system.employee;");            while (rs.next()){                employeeList.add(rs.getString("employee_full_name"));            }            conn.close();        }catch(Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        try{            ConnectionClass conn=new ConnectionClass();            type=conn.select("SELECT description FROM lending_management_system.loan_type;");            while (type.next()){                loanType.add(type.getString("description"));            }            conn.close();        }catch(Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        showStatusComboBox.setItems(statusFilter);        searchFilterComboBox.setItems(searchFilter);        employeeAssignedCombobox.setItems(employeeList);        loanTypeComboBox.setItems(loanType);        frequencyCombobox.setItems(paymentFrequency);        loanTermCombobox.setItems(termMeasure);        dueDateDatePicker.setValue(due);        showStatusComboBox.getSelectionModel().clearAndSelect(0);        searchFilterComboBox.getSelectionModel().select(0);        loanTypeComboBox.getSelectionModel().select(0);        frequencyCombobox.getSelectionModel().select(0);        loanTermCombobox.getSelectionModel().select(0);        employeeAssignedCombobox.getSelectionModel().select(0);    }    private void searchAccount(String filter, String searched, String status){        String searchFilter="";        String tableName="";        switch (filter){            case "Firstname":                searchFilter = "first_name";                tableName="client.";                break;            case "Lastname":                searchFilter = "last_name";                tableName="client.";                break;            case "Assigned":                searchFilter = "concat(employee.first_name,' ',employee.last_name)";                tableName="";                break;            case "Receiver":                searchFilter = "username";                tableName="user_account.";        }        UserAccount user=new UserAccount();        ObservableList<Loan_Account> accounts= FXCollections.observableArrayList();        ResultSet rs;        Loan_Account account=new Loan_Account();        try{            ConnectionClass getAccounts=new ConnectionClass();            rs=getAccounts.select("select loan_account.id, client.first_name, client.last_name, loan_type.description, loan_account.principal, loan_account.interest, loan_account.loan_term,\n" +                    "loan_account.due_amount, loan_account.penalty, loan_account.balance, loan_account.release_date, loan_account.due_date, loan_account.scheduled_amount,\n" +                    "loan_account.next_schedule, loan_account.status, concat(employee.first_name,' ',employee.last_name) as employee_full_name, loan_account.User_account_id\n" +                    "from lending_management_system.loan_account\n" +                    "join lending_management_system.client\n" +                    "on loan_account.Client_id=client.id\n" +                    "join lending_management_system.loan_type\n" +                    "on loan_account.Loan_Type_id=loan_type.id\n" +                    "join lending_management_system.employee\n" +                    "on client.Employee_id=employee.id\n" +                    "join lending_management_system.user_account\n" +                    "on user_account.Employee_id=employee.id " +                    "where " +tableName+ "" +searchFilter+ " LIKE '%"+searched+"%' order by release_date desc;");            while(rs.next()){                Loan_Account accountToList=new Loan_Account();                accountToList.setId(rs.getInt("id"));                accountToList.setFirstName(rs.getString("first_name"));                accountToList.setLastName(rs.getString("last_name"));                accountToList.setFullName(accountToList.getFirstName()+" "+accountToList.getLastName());                accountToList.setLoanDescription(rs.getString("description"));                accountToList.setPrincipal(rs.getDouble("principal"));                accountToList.setInterest(rs.getDouble("interest"));                accountToList.setLoanTerm(rs.getInt("loan_term"));                accountToList.setAmount(rs.getDouble("due_amount"));                accountToList.setPenalty(rs.getDouble("penalty"));                accountToList.setBalance(rs.getDouble("balance"));                if(rs.getDate("release_date")==null){                    accountToList.setReleaseDate("--------");                }                else{                    accountToList.setReleaseDate(rs.getDate("release_date").toLocalDate());                }                if(rs.getDate("due_date")==null){                    accountToList.setDueDate("--------");                }                else{                    accountToList.setDueDate(rs.getDate("due_date").toLocalDate());                }                accountToList.setScheduledAmount(rs.getDouble("scheduled_amount"));                if(rs.getDate("next_schedule")==null){                    accountToList.setNextSchedule("--------");                }                else{                    accountToList.setNextSchedule(rs.getDate("next_schedule").toLocalDate());                }                accountToList.setStatus(rs.getString("status"));                accountToList.setAssignedEmployee(rs.getString("employee_full_name"));                user.setId(rs.getInt("User_account_id"));                accountToList.setReceiverUser(user.getUserName(user.getId()));                accounts.add(accountToList);            }            getAccounts.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        loanIdColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Integer>("id"));        loanClientNameColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("fullName"));        loanTypeColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("loanDescription"));        loanPrincipalColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("principal"));        loanRateColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Float>("interest"));        loanTermColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Integer>("loanTerm"));        loanTotalColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("amount"));        loanPenaltyColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("penalty"));        loanBalanceColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("balance"));        loanReleaseDateColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Object>("releaseDate"));        loanDueDateColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Object>("dueDate"));        loanScheduledAmountColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("scheduledAmount"));        loanPaymentDate.setCellValueFactory(new PropertyValueFactory<Loan_Account, Object>("nextSchedule"));        loanStatusColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("status"));        loanAssignedColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("assignedEmployee"));        loanReceiverColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("receiverUser"));        accountsTable.setItems(accounts);    }    private void filterStatus(String status){        ObservableList<Loan_Account> accounts= FXCollections.observableArrayList();        UserAccount user=new UserAccount();        ResultSet rs;        Loan_Account account=new Loan_Account();        try{            ConnectionClass getAccounts=new ConnectionClass();            rs=getAccounts.select("select loan_account.id, client.first_name, client.last_name, loan_type.description, loan_account.principal, loan_account.interest, loan_account.loan_term,\n" +                    "loan_account.due_amount, loan_account.penalty, loan_account.balance, loan_account.release_date, loan_account.due_date, loan_account.scheduled_amount,\n" +                    "loan_account.next_schedule, loan_account.status, concat(employee.first_name,' ',employee.last_name) as employee_full_name, loan_account.User_account_id\n" +                    "from lending_management_system.loan_account\n" +                    "join lending_management_system.client\n" +                    "on loan_account.Client_id=client.id\n" +                    "join lending_management_system.loan_type\n" +                    "on loan_account.Loan_Type_id=loan_type.id\n" +                    "join lending_management_system.employee\n" +                    "on client.Employee_id=employee.id\n" +                    "join lending_management_system.user_account\n" +                    "on user_account.Employee_id=employee.id " +                    "where loan_account.status = '"+status+"' order by release_date desc;");            while(rs.next()){                Loan_Account accountToList=new Loan_Account();                accountToList.setId(rs.getInt("id"));                accountToList.setFirstName(rs.getString("first_name"));                accountToList.setLastName(rs.getString("last_name"));                accountToList.setFullName(accountToList.getFirstName()+" "+accountToList.getLastName());                accountToList.setLoanDescription(rs.getString("description"));                accountToList.setPrincipal(rs.getDouble("principal"));                accountToList.setInterest(rs.getDouble("interest"));                accountToList.setLoanTerm(rs.getInt("loan_term"));                accountToList.setAmount(rs.getDouble("due_amount"));                accountToList.setPenalty(rs.getDouble("penalty"));                accountToList.setBalance(rs.getDouble("balance"));                if(rs.getDate("release_date")==null){                    accountToList.setReleaseDate("--------");                }                else{                    accountToList.setReleaseDate(rs.getDate("release_date").toLocalDate());                }                if(rs.getDate("due_date")==null){                    accountToList.setDueDate("--------");                }                else{                    accountToList.setDueDate(rs.getDate("due_date").toLocalDate());                }                accountToList.setScheduledAmount(rs.getDouble("scheduled_amount"));                if(rs.getDate("next_schedule")==null){                    accountToList.setNextSchedule("--------");                }                else{                    accountToList.setNextSchedule(rs.getDate("next_schedule").toLocalDate());                }                accountToList.setStatus(rs.getString("status"));                accountToList.setAssignedEmployee(rs.getString("employee_full_name"));                user.setId(rs.getInt("User_account_id"));                accountToList.setReceiverUser(user.getUserName(user.getId()));                accounts.add(accountToList);            }            getAccounts.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        loanIdColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Integer>("id"));        loanClientNameColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("fullName"));        loanTypeColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("loanDescription"));        loanPrincipalColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("principal"));        loanRateColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Float>("interest"));        loanTermColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Integer>("loanTerm"));        loanTotalColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("amount"));        loanPenaltyColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("penalty"));        loanBalanceColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("balance"));        loanReleaseDateColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Object>("releaseDate"));        loanDueDateColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Object>("dueDate"));        loanScheduledAmountColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, Double>("scheduledAmount"));        loanPaymentDate.setCellValueFactory(new PropertyValueFactory<Loan_Account, Object>("nextSchedule"));        loanStatusColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("status"));        loanAssignedColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("assignedEmployee"));        loanReceiverColumn.setCellValueFactory(new PropertyValueFactory<Loan_Account, String>("receiverUser"));        accountsTable.setItems(accounts);    }    private void getSelectedItems(){        createAccountVBox.setDisable(true);        saveButton.setText("Save");        ResultSet rs;        Loan_Account selectedAccountId;        LoanType loanType = new LoanType();        Employee employee=new Employee();        selectedAccount=accountsTable.getSelectionModel().getSelectedItem();        selectedLoanId=selectedAccount.getId();        selectedLoanStatus=selectedAccount.getStatus();        try{            ConnectionClass connect=new ConnectionClass();            rs=connect.select(String.format("SELECT client.id, client.middle_name, client.address, client.contact_number, loan_account.skip_sundays, loan_account.payment_frequency\n" +                    "from lending_management_system.loan_account\n" +                    "join lending_management_system.client\n" +                    "on loan_account.Client_id=client.id\n" +                    "join lending_management_system.loan_type\n" +                    "on loan_account.Loan_Type_id=loan_type.id\n" +                    "where loan_account.id = '%d';",selectedAccount.getId()));            while (rs.next()){                selectedAccount.setClientId(rs.getInt("id"));                selectedAccount.setMiddleName(rs.getString("middle_name"));                selectedAccount.setAddress(rs.getString("address"));                selectedAccount.setContactNumber(rs.getString("contact_number"));                selectedAccount.setSkipSundays(rs.getBoolean("skip_sundays"));                selectedAccount.setPaymentFrequency(rs.getString("payment_frequency"));            }            selectedClientID=selectedAccount.getClientId();            selectedEmployeeID=employee.getEmployeeID(employeeAssignedCombobox.getValue());            connect.close();        }catch(Exception e){            System.out.println(e.getMessage());        }        if(selectedAccount.getDueDate()=="--------"){            due=LocalDate.now();        }else{            due=LocalDate.parse(selectedAccount.getDueDate()+"");        }    }    public void fetchDataOnSelectedRow(){        lastnameField.setText(selectedAccount.getLastName());        firstnameField.setText(selectedAccount.getFirstName());        middlenameField.setText(selectedAccount.getMiddleName());        loanAmountField.setText(selectedAccount.getPrincipal()+"");        addressField.setText(selectedAccount.getAddress()+"");        contactNumberField.setText(selectedAccount.getContactNumber()+"");        sundaysCheckBox.setSelected(selectedAccount.isSkipSundays());        frequencyCombobox.setValue(selectedAccount.getPaymentFrequency());        loanTypeComboBox.setValue(selectedAccount.getLoanDescription());        loanTermValueField.setText(selectedAccount.getLoanTerm()+"");        frequencyCombobox.setValue(selectedAccount.getPaymentFrequency());        rateField.setText(selectedAccount.getInterest()*100+"");        dueDateDatePicker.setValue(due);        totalAmountField.setText(selectedAccount.getBalance()+"");        paymentPerFrequencyField.setText(selectedAccount.getScheduledAmount()+"");        Employee employee=new Employee();        int employeeID=employee.getEmployeeID(employeeAssignedCombobox.getValue());        //Client insertClient= new Client(0,employeeID,lastnameField.getText(),firstnameField.getText(), middlenameField.getText(), addressField.getText(), contactNumberField.getText(), "for approval");    }    private void deleteSelectedAccount(int id){        try{            ConnectionClass deleteAccount=new ConnectionClass();            deleteAccount.delete(String.format("delete from lending_management_system.loan_account\n" +                    "where loan_account.id='%d';",id));            deleteAccount.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }    }    private void approveSelectedAccount(int id){        try{            ConnectionClass approveAccount=new ConnectionClass();            approveAccount.update(String.format("update lending_management_system.loan_account\n " +                    "set loan_account.status='approved'\n " +                    "where id ='%d';",id));            Notifications success=new Notifications("Operation Successful", "The account was approved successfully");            success.showInformation();            approveAccount.close();        }catch(Exception e){            Notifications unsuccessful=new Notifications("Operation Unsuccessful", e.getMessage());            unsuccessful.showError();            System.out.println(e.getMessage());            e.printStackTrace();        }    }    private void declineSelectedAccount(int id){        try{            ConnectionClass approveAccount=new ConnectionClass();            approveAccount.update(String.format("update lending_management_system.loan_account\n " +                    "set loan_account.status='declined'\n " +                    "where id ='%d';",id));            Notifications success=new Notifications("Operation Successful", "The account was declined successfully");            success.showInformation();            approveAccount.close();        }catch(Exception e){            Notifications unsuccessful=new Notifications("Operation Unsuccessful", e.getMessage());            unsuccessful.showError();            System.out.println(e.getMessage());            e.printStackTrace();        }    }    private void blockSelectedAccount(int id){        if(selectedLoanStatus.equals("blocked")){            try{                ConnectionClass approveAccount=new ConnectionClass();                approveAccount.update(String.format("update lending_management_system.loan_account\n " +                        "set loan_account.status='for approval'\n " +                        "where id ='%d';",id));                Notifications success=new Notifications("Operation Successful", "The account was blocked successfully");                success.showInformation();                approveAccount.close();            }catch(Exception e){                Notifications unsuccessful=new Notifications("Operation Unsuccessful", e.getMessage());                unsuccessful.showError();                System.out.println(e.getMessage());                e.printStackTrace();            }        }else{            try{                ConnectionClass approveAccount=new ConnectionClass();                approveAccount.update(String.format("update lending_management_system.loan_account\n " +                        "set loan_account.status='blocked'\n " +                        "where id ='%d';",id));                Notifications success=new Notifications("Operation Successful", "The account was blocked successfully");                success.showInformation();                approveAccount.close();            }catch(Exception e){                Notifications unsuccessful=new Notifications("Operation Unsuccessful", e.getMessage());                unsuccessful.showError();                System.out.println(e.getMessage());                e.printStackTrace();            }        }    }    private  void disableAccountCreationButtons(){        saveButton.setDisable(true);        saveAndReleaseButton.setDisable(true);        calculateButton.setDisable(true);    }    private  void enableAccountCreationButtons(){        if(isUpdating()){            saveButton.setText("Update");            saveButton.setDisable(false);            saveAndReleaseButton.setDisable(true);            calculateButton.setDisable(false);        }else{            saveButton.setText("Save");            saveButton.setDisable(false);            saveAndReleaseButton.setDisable(false);            calculateButton.setDisable(false);        }    }    private void disableAccountControls(){        if(this.isUpdating()){            editButton.setDisable(true);            viewLedgerButton.setDisable(true);            approveButton.setDisable(true);            declineButton.setDisable(true);            releaseButton.setDisable(true);            deleteButton.setDisable(true);            renewButton.setDisable(true);            blockButton.setText("Block");            blockButton.setDisable(true);            cancelButton.setDisable(false);        }else{            if(selectedLoanStatus.equals("active")){                editButton.setDisable(true);                viewLedgerButton.setDisable(false);                approveButton.setDisable(true);                declineButton.setDisable(true);                releaseButton.setDisable(true);                deleteButton.setDisable(true);                renewButton.setDisable(true);                blockButton.setText("Block");                blockButton.setDisable(false);            }            else if(selectedLoanStatus.equals("for approval")){                editButton.setDisable(false);                viewLedgerButton.setDisable(true);                approveButton.setDisable(false);                declineButton.setDisable(false);                releaseButton.setDisable(true);                deleteButton.setDisable(false);                renewButton.setDisable(true);                blockButton.setText("Block");                blockButton.setDisable(true);            }            else if(selectedLoanStatus.equals("approved")){                editButton.setDisable(false);                viewLedgerButton.setDisable(true);                approveButton.setDisable(true);                declineButton.setDisable(false);                releaseButton.setDisable(false);                deleteButton.setDisable(false);                renewButton.setDisable(true);                blockButton.setText("Block");                blockButton.setDisable(true);            }            else if(selectedLoanStatus.equals("settled")){                editButton.setDisable(true);                viewLedgerButton.setDisable(false);                approveButton.setDisable(true);                declineButton.setDisable(true);                releaseButton.setDisable(true);                renewButton.setDisable(false);                deleteButton.setDisable(true);                blockButton.setText("Block");                blockButton.setDisable(false);            }            else if(selectedLoanStatus.equals("declined")){                editButton.setDisable(false);                viewLedgerButton.setDisable(true);                approveButton.setDisable(false);                declineButton.setDisable(true);                releaseButton.setDisable(true);                renewButton.setDisable(true);                deleteButton.setDisable(false);                blockButton.setText("Block");                blockButton.setDisable(true);            }            else if(selectedLoanStatus.equals("blocked")){                editButton.setDisable(true);                viewLedgerButton.setDisable(true);                approveButton.setDisable(true);                declineButton.setDisable(true);                releaseButton.setDisable(true);                renewButton.setDisable(true);                deleteButton.setDisable(true);                blockButton.setText("Unblock");                blockButton.setDisable(false);            }            else if(selectedLoanStatus.equals("settled")){                editButton.setDisable(true);                viewLedgerButton.setDisable(false);                approveButton.setDisable(true);                declineButton.setDisable(true);                releaseButton.setDisable(true);                renewButton.setDisable(false);                deleteButton.setDisable(true);                blockButton.setText("Block");                blockButton.setDisable(true);            }        }    }    private void updateAccount(){        LoanType type=new LoanType();        int id;        selectedLoanType=loanTypeComboBox.getValue();        id=type.getLoanTypeId(selectedLoanType);        int value = sundaysCheckBox.isSelected() ? 1 : 0;        try{            ConnectionClass updateClient=new ConnectionClass();            updateClient.update("UPDATE lending_management_system.client \n" +                    "SET first_name = '"+firstnameField.getText()+"', last_name='"+lastnameField.getText()+"', middle_name='"+middlenameField.getText()+"', address='"+addressField.getText()+"', contact_number='"+contactNumberField.getText()+"', Employee_id='"+selectedEmployeeID+"'\n " +                    "WHERE client.id='"+selectedClientID+"';");            updateClient.update("UPDATE lending_management_system.loan_account\n " +                    "SET principal = '"+loanAmountField.getText()+"', interest = '"+simulate.getInterestRate()+"', loan_term = '"+loanTermValueField.getText()+"', payment_frequency = '"+frequencyCombobox.getValue()+"', skip_sundays = '"+value+"', due_amount = '"+simulate.getTotalAmount()+"', penalty = '0', balance = '"+simulate.getTotalAmount()+"', scheduled_amount = '"+simulate.getPaymentPerFrequency()+"', Loan_Type_id = '"+id+"' \n" +                    "WHERE id = '"+selectedLoanId+"'");            updateClient.close();            success=new Notifications("Success!", "The account was updated successfully.");            success.showInformation();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();            error=new Notifications("Error", e.getMessage());        }    }    private void releaseLoanAccount(){        calculate();        try{            ConnectionClass updateLoanAccount=new ConnectionClass();            updateLoanAccount.update("UPDATE lending_management_system.loan_account\n " +                    "SET release_date = '"+releaseDate+"', due_date = '"+simulate.getDueDate()+"', next_schedule = '"+simulate.getNextSchedule()+"', scheduled_amount = '"+simulate.getPaymentPerFrequency()+"', status = 'active' " +                    "WHERE id = '"+selectedLoanId+"'");            updateLoanAccount.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        UserAccount activeUser=new UserAccount();        int userActiveID=activeUser.getUserId(UsernameText.getText());        if(simulate.getPaymentFrequency().equals("Daily")){            if(simulate.isIncludeSundays()==false){                while(releaseDate.isBefore(simulate.getDueDate())){                    if(releaseDate.plusDays(1).getDayOfWeek().equals(DayOfWeek.SUNDAY)){                        releaseDate=releaseDate.plusDays(1);                    }else{                        simulate.setNextSchedule(releaseDate.plusDays(1));                        try {                            ConnectionClass insertTransaction = new ConnectionClass();                            insertTransaction.insert("INSERT INTO lending_management_system.payment (User_Account_id, date, amount_due, amount_paid, excess, penalty, payment_date, status, Collector_id, Loan_Account_id) " +                                    "VALUES ('"+userActiveID+"', '"+simulate.getNextSchedule()+"', '"+simulate.getPaymentPerFrequency()+"', '0', '0', '0', '0000-00-00', 'pending', '"+selectedEmployeeID+"', '"+selectedLoanId+"');\n");                            insertTransaction.close();                        }catch (Exception e) {                            System.out.println(e.getMessage());                            e.printStackTrace();                        }                        releaseDate=releaseDate.plusDays(1);                    }                }            }else{                while(releaseDate.isBefore(simulate.getDueDate())){                    simulate.setNextSchedule(releaseDate.plusDays(1));                    try {                        ConnectionClass insertTransaction = new ConnectionClass();                        insertTransaction.insert("INSERT INTO lending_management_system.payment (User_Account_id, date, amount_due, amount_paid, excess, penalty, payment_date, status, Collector_id, Loan_Account_id) " +                                "VALUES ('"+userActiveID+"', '"+simulate.getNextSchedule()+"', '"+simulate.getPaymentPerFrequency()+"', '0', '0', '0', '0000-00-00', 'pending', '"+selectedEmployeeID+"', '"+selectedLoanId+"');\n");                        insertTransaction.close();                    }catch (Exception e) {                        System.out.println(e.getMessage());                        e.printStackTrace();                    }                    releaseDate=releaseDate.plusDays(1);                }            }            releaseDate=LocalDate.now();        } else if(simulate.getPaymentFrequency().equals("Weekly")){            while(releaseDate.isBefore(simulate.getDueDate())){                simulate.setNextSchedule(releaseDate.plusWeeks(1));                try {                    ConnectionClass insertTransaction = new ConnectionClass();                    insertTransaction.insert("INSERT INTO lending_management_system.payment (User_Account_id, date, amount_due, amount_paid, excess, penalty, payment_date, status, Collector_id, Loan_Account_id) " +                            "VALUES ('"+userActiveID+"', '"+simulate.getNextSchedule()+"', '"+simulate.getPaymentPerFrequency()+"', '0', '0', '0', '0000-00-00', 'pending', '"+selectedEmployeeID+"', '"+selectedLoanId+"');\n");                    insertTransaction.close();                }catch (Exception e) {                    System.out.println(e.getMessage());                    e.printStackTrace();                }                releaseDate=releaseDate.plusWeeks(1);            }            releaseDate=LocalDate.now();        }else if(simulate.getPaymentFrequency().equals("Fortnightly")){            while(releaseDate.isBefore(simulate.getDueDate())){                simulate.setNextSchedule(releaseDate.plusWeeks(2));                try {                    ConnectionClass insertTransaction = new ConnectionClass();                    insertTransaction.insert("INSERT INTO lending_management_system.payment (User_Account_id, date, amount_due, amount_paid, excess, penalty, payment_date, status, Collector_id, Loan_Account_id) " +                            "VALUES ('"+userActiveID+"', '"+simulate.getNextSchedule()+"', '"+simulate.getPaymentPerFrequency()+"', '0', '0', '0', '0000-00-00', 'pending', '"+selectedEmployeeID+"', '"+selectedLoanId+"');\n");                    insertTransaction.close();                }catch (Exception e) {                    System.out.println(e.getMessage());                    e.printStackTrace();                }                releaseDate=releaseDate.plusWeeks(2);            }            releaseDate=LocalDate.now();        }else if(simulate.getPaymentFrequency().equals("Monthly")){            while(releaseDate.isBefore(simulate.getDueDate())){                simulate.setNextSchedule(releaseDate.plusMonths(1));                try {                    ConnectionClass insertTransaction = new ConnectionClass();                    insertTransaction.insert("INSERT INTO lending_management_system.payment (User_Account_id, date, amount_due, amount_paid, excess, penalty, payment_date, status, Collector_id, Loan_Account_id) " +                            "VALUES ('"+userActiveID+"', '"+simulate.getNextSchedule()+"', '"+simulate.getPaymentPerFrequency()+"', '0', '0', '0', '0000-00-00', 'pending', '"+selectedEmployeeID+"', '"+selectedLoanId+"');\n");                    insertTransaction.close();                }catch (Exception e) {                    System.out.println(e.getMessage());                    e.printStackTrace();                }                releaseDate=releaseDate.plusMonths(1);            }            releaseDate=LocalDate.now();        }    }    public boolean isUpdating() {        return isUpdating;    }    public void setUpdating(boolean updating) {        isUpdating = updating;    }    public void setLoansDefaults(){        lastnameField.setText("");        firstnameField.setText("");        middlenameField.setText("");        loanAmountField.setText("");        addressField.setText("");        contactNumberField.setText("");        sundaysCheckBox.setSelected(false);        loanTermValueField.setText("");        rateField.setText("");        dueDateDatePicker.setValue(due);        totalAmountField.setText("");        paymentPerFrequencyField.setText("");        editButton.setDisable(true);        viewLedgerButton.setDisable(true);        approveButton.setDisable(true);        declineButton.setDisable(true);        releaseButton.setDisable(true);        deleteButton.setDisable(true);        renewButton.setDisable(true);        blockButton.setText("Block");        blockButton.setDisable(true);        cancelButton.setDisable(true);        populateLoansChoices();    }    //DASHBOARD METHODS    private void setVisibility(Node box){        box.setVisible(true);    }    //Set the dates to the current date.    private void setDates(){        Dates date=new Dates();        collectionsDateToday.setText(date.getDateToday());        collectionsDateYesterday.setText(date.getDateYesterday());        collectionsDateThisWeek.setText(date.getThisWeek());        collectionsMonth.setText(date.getThisMonth());        collectionsThisYear.setText(date.getThisYear());        releaseTodayDate.setText(date.getDateToday());        releaseYesterdayDate.setText(date.getDateYesterday());        releaseThisWeekDate.setText(date.getThisWeek());        releaseThisMonth.setText(date.getThisMonth());        releaseThisYear.setText(date.getThisYear());        expensesTodayDate.setText(date.getDateToday());        expensesYesterdayDate.setText(date.getDateYesterday());        expensesThisWeekDate.setText(date.getThisWeek());        expensesThisMonth.setText(date.getThisMonth());        expensesThisYear.setText(date.getThisYear());    }    private void setCountRecords() {        CountSummary summary = new CountSummary();        forApprovalCount.setText(summary.getForApprovalCount()+"");        approvedCount.setText(summary.getApprovedCount()+"");        activeCount.setText(summary.getActiveCount()+"");        overdueCount.setText(summary.getOverDueCount()+"");        settledCount.setText(summary.getSettledCount()+"");        blockedCount.setText(summary.getBlockedCount()+"");    }    private void setAmountSummary(){        AmountsSummary collectionsSummary=new AmountsSummary();        collectionsTodayTotal.setText("₱"+collectionsSummary.getTodayAmount("payment","amount_paid", "payment_date"));        collectionsTotalYesterday.setText("₱"+collectionsSummary.getYesterdayAmount("payment","amount_paid", "payment_date"));        collectionsThisWeekTotal.setText("₱"+collectionsSummary.getThisWeekAmount("payment","amount_paid", "payment_date"));        collectionsThisMonthTotal.setText("₱"+collectionsSummary.getThisMonthAmount("payment","amount_paid", "payment_date"));        collectionsThisYearTotal.setText("₱"+collectionsSummary.getThisYearAmount("payment","amount_paid", "payment_date"));        releaseTodayTotal.setText("₱"+collectionsSummary.getTodayAmount("loan_account","principal", "release_date"));        releaseYesterdayTotal.setText("₱"+collectionsSummary.getYesterdayAmount("loan_account","principal", "release_date"));        releaseThisWeekTotal.setText("₱"+collectionsSummary.getThisWeekAmount("loan_account","principal", "release_date"));        releaseThisMonthTotal.setText("₱"+collectionsSummary.getThisMonthAmount("loan_account","principal", "release_date"));        releaseThisYearTotal.setText("₱"+collectionsSummary.getThisYearAmount("loan_account","principal", "release_date"));        expensesTodayTotal.setText("₱"+collectionsSummary.getTodayAmount("expenses","amount", "date"));        expensesYesterdayTotal.setText("₱"+collectionsSummary.getYesterdayAmount("expenses","amount", "date"));        expensesThisWeekTotal.setText("₱"+collectionsSummary.getThisWeekAmount("expenses","amount", "date"));        expensesThisMonthTotal.setText("₱"+collectionsSummary.getThisMonthAmount("expenses","amount", "date"));        expensesThisYearTotal.setText("₱"+collectionsSummary.getThisYearAmount("expenses","amount", "date"));    }    private void updateDashboard(){        ExecutorService executorService = Executors.newFixedThreadPool(1);        // execute this method simultaneously        executorService.submit(this::setDates);        executorService.submit(this::setCountRecords);        executorService.submit(this::setAmountSummary);        executorService.submit(this::populateDueTodayTable);        executorService.submit(this::populateDueTomorrowTable);        executorService.submit(this::populateThisWeekTable);        // close executorService        executorService.shutdown();    }    private void populateDueTodayTable(){        ObservableList<Due> dueToday= FXCollections.observableArrayList();        LocalDate dateNow=LocalDate.now();        try{            ConnectionClass connect=new ConnectionClass();            rs=connect.select(String.format("SELECT concat(client.first_name,' ',client.last_name) as client_name, concat(employee.first_name,' ',employee.last_name) AS fullName\n" +                    "FROM lending_management_system.loan_account JOIN lending_management_system.client \n" +                    "JOIN lending_management_system.employee ON loan_account.Client_id=client.id AND client.Employee_id=employee.id " +                    "JOIN lending_management_system.payment ON payment.Loan_Account_id=loan_account.id " +                    "WHERE payment.date = '%s' AND payment.status = 'pending' AND loan_account.status='active';",dateNow));            while (rs.next()){                dueToday.add(new Due(rs.getString("client_name"),rs.getString("fullName")));            }            connect.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        dueTodayNameColumn.setCellValueFactory(new PropertyValueFactory<Due, String>("clientName"));        dueTodayCollectorColumn.setCellValueFactory(new PropertyValueFactory<Due, String>("collector"));        dueTodayTable.setItems(dueToday);    }    private void populateDueTomorrowTable(){        ObservableList<Due> dueTomorrow = FXCollections.observableArrayList();        LocalDate dateTomorrow=LocalDate.now().plusDays(1);        try{            ConnectionClass conn=new ConnectionClass();            rs=conn.select(String.format("SELECT concat(client.first_name,' ',client.last_name) as client_name, concat(employee.first_name,' ',employee.last_name) AS fullName\n" +                    "FROM lending_management_system.loan_account JOIN lending_management_system.client \n" +                    "JOIN lending_management_system.employee ON loan_account.Client_id=client.id AND client.Employee_id=employee.id " +                    "JOIN lending_management_system.payment ON payment.Loan_Account_id=loan_account.id " +                    "WHERE payment.date = '%s' AND payment.status = 'pending' AND loan_account.status='active';",dateTomorrow));            while (rs.next()){                dueTomorrow.add(new Due(rs.getString("client_name"),rs.getString("fullName")));            }            conn.close();        }catch (Exception e){            System.out.println(e.getMessage());            System.out.println(e.getCause());            e.printStackTrace();        }        dueTomorrowNameColumn.setCellValueFactory(new PropertyValueFactory<Due, String>("clientName"));        dueTomorrowCollectorColumn.setCellValueFactory(new PropertyValueFactory<Due, String>("collector"));        dueTomorrowTable.setItems(dueTomorrow);    }    private void populateThisWeekTable(){        LocalDate dateTomorrow=LocalDate.now().plusDays(1);        ObservableList<Due> thisWeek= FXCollections.observableArrayList();        try{            ConnectionClass connect=new ConnectionClass();            rs=connect.select(String.format("SELECT concat(client.first_name,' ',client.last_name) as client_name, concat(employee.first_name,' ',employee.last_name) AS fullName, employee.middle_name\n" +                    "FROM lending_management_system.loan_account JOIN lending_management_system.client \n" +                    "JOIN lending_management_system.employee ON loan_account.Client_id=client.id AND client.Employee_id=employee.id " +                    "JOIN lending_management_system.payment ON payment.Loan_Account_id=loan_account.id " +                    "WHERE WEEK(`date`, 1) = WEEK(CURRENT_DATE(), 1) AND payment.date != curdate() AND payment.date != '%s' AND payment.status = 'pending' AND loan_account.status='active' ORDER BY date ASC;",dateTomorrow));            while (rs.next()){                thisWeek.add(new Due(rs.getString("client_name"),rs.getString("fullName")));            }            connect.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        dueThisWeekNameColumn.setCellValueFactory(new PropertyValueFactory<Due, String>("clientName"));        dueThisWeekCollectorColumn.setCellValueFactory(new PropertyValueFactory<Due, String>("collector"));        dueThisWeekTable.setItems(thisWeek);    }    private void populateSimulator(){        ResultSet type;        ObservableList<String> paymentFrequency=FXCollections.observableArrayList();        paymentFrequency.add("Daily");        paymentFrequency.add("Weekly");        //paymentFrequency.add("Fortnightly");        //paymentFrequency.add("Monthly");        ObservableList<String> termMeasure=FXCollections.observableArrayList();        termMeasure.add("Month/s");        ObservableList<String> loanType=FXCollections.observableArrayList();        try{            ConnectionClass conn=new ConnectionClass();            type=conn.select("SELECT description FROM lending_management_system.loan_type;");            while (type.next()){                loanType.add(type.getString("description"));            }        }catch(Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }            simulatorLoanTypeCombobox.setItems(loanType);            simulatorFrequencyCombobox.setItems(paymentFrequency);            simulatorLoanTermCombobox.setItems(termMeasure);            simulatorLoanTypeCombobox.getSelectionModel().select(1);            simulatorFrequencyCombobox.getSelectionModel().selectFirst();            simulatorLoanTermCombobox.getSelectionModel().selectFirst();    }    private void simulate(){        NumberFormat myFormat = NumberFormat.getInstance();        myFormat.setGroupingUsed(true);        Calculation simulate=new Calculation(Double.parseDouble(simulatorLoanAmountField.getText()),simulatorLoanTypeCombobox.getValue(),simulatorFrequencyCombobox.getValue(),IncludeSundaysCheckBox.isSelected(),Float.parseFloat(simulatorInterestRateField.getText())/100,Integer.parseInt(simulatorLoanTermField.getText()),simulatorLoanTermCombobox.getValue());        simulatorTotalAmountField.setText("₱"+myFormat.format(simulate.getTotalAmount()));        simulatorPaymentField.setText("₱"+myFormat.format(simulate.getPaymentPerFrequency())+" "+simulate.getPaymentFrequency());    }    private void setDefaultsValues(){        if(dashboard.isVisible()==true){            updateDashboard();        }        if(loansBox.isVisible()==true){            populateLoansChoices();        }    }    //TRANSACTIONS METHODS    private void populateTodayVboxContainer(){        LocalDate dateNow=LocalDate.now();        Text todayText=new Text("Due Today ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");        todayText.setFont(Font.font("verdana", FontWeight.BOLD, FontPosture.REGULAR, 16));        //containerVbox.getChildren().clear();        containerVbox.getChildren().add(todayText);        try{            ConnectionClass getTransactions=new ConnectionClass();            rs = getTransactions.select("SELECT payment.id, Loan_Account_id, concat(client.first_name,' ', client.last_name) as client_name, concat(employee.first_name,' ', employee.last_name) as employee_name, payment.date,\n" +                    "payment.amount_due, payment.penalty\n" +                    "FROM lending_management_system.loan_account\n" +                    "JOIN lending_management_system.client\n" +                    "ON loan_account.Client_id=client.id\n" +                    "JOIN lending_management_system.payment\n" +                    "ON payment.Loan_Account_id=loan_account.id\n" +                    "JOIN lending_management_system.collector\n" +                    "ON payment.Collector_id=collector.id\n" +                    "JOIN lending_management_system.employee\n" +                    "ON collector.Employee_id=employee.id\n" +                    " WHERE payment.status='pending' AND payment.date = '"+dateNow+"' AND loan_account.status='active';");            while(rs.next()){                Region space=new Region();                HBox container = new HBox();                Label loanInfoLabel=new Label();                TextField amountPaidField=new TextField();                amountPaidField.setAlignment(Pos.CENTER);                amountPaidField.setPromptText("Payment");                TextField officialReceiptField=new TextField();                officialReceiptField.setAlignment(Pos.CENTER);                officialReceiptField.setPromptText("Receipt");                TextField remarksField=new TextField();                remarksField.setAlignment(Pos.CENTER);                remarksField.setPromptText("Remarks");                Button pass=new Button("Pass");                Button settle=new Button("Settle");                Button ledgerView=new Button("Ledger");                remarksField.setPrefWidth(110);                amountPaidField.setPrefWidth(100);                officialReceiptField.setPrefWidth(80);                pass.setPrefWidth(60);                settle.setPrefWidth(60);                ledgerView.setPrefWidth(70);                space.setPrefWidth(20);                container.setAlignment(Pos.CENTER_LEFT);                container.setSpacing(10.0);                container.setPadding(new Insets(20,20,20,20));                container.setBackground(new Background(new BackgroundFill(Color.WHITE,                        CornerRadii.EMPTY,                        Insets.EMPTY)));                container.prefWidthProperty().bind(containerVbox.widthProperty());                containerVbox.setFillWidth(true);                transaction=new Transaction(rs.getInt("id"), rs.getInt("Loan_Account_id"), rs.getString("client_name"), rs.getString("employee_name"), rs.getDate("date").toLocalDate(), rs.getDouble("amount_due"),  rs.getDouble("penalty"));                container.setId(transaction.getId()+"");                TextField field=amountPaidField;                loanInfoLabel.setText(String.format("ID: %0$-5d\t Loan ID: %0$-5d\t Name: %0$-30s\t Assigned: %0$-30s\t Scheduled Date: %0$-10s\t\t Amort: %.2f\t\t",transaction.getId(), transaction.getLoanId(), transaction.getAccountName(), transaction.getAssignedEmployee(), transaction.getScheduledDate(), transaction.getAmountDue(), transaction.getPenalty()));                container.getChildren().addAll(loanInfoLabel, amountPaidField, officialReceiptField, remarksField, space, settle, pass, ledgerView );                containerVbox.getChildren().add(new HBox(container));                pass.setOnAction(new EventHandler<ActionEvent>() {                    @Override public void handle(ActionEvent event) {                        int id=Integer.parseInt(pass.getParent().getId());                        System.out.println("Passing transaction id: \t" +id+" Due Date: \t"+getScheduledDate(id)+" Due Amount: \t"+getDueAmount(id));                        try{                            pass(id, remarksField.getText());                            success=new Notifications("Success!", "The schedule was passed successfully.");                            success.showInformation();                            reloadVboxContainer();                        }catch (Exception e){                            System.out.println(e.getMessage());                            e.printStackTrace();                            error=new Notifications("Error",e.getMessage());                            error.showError();                        }                    }                });                settle.setOnAction(new EventHandler<ActionEvent>() {                    @Override public void handle(ActionEvent event) {                        Node parent=settle.getParent();                        int id=Integer.parseInt(parent.getId());                        int orNum;                        if(officialReceiptField.getText().equals("")){                            orNum=0;                        }else{                            orNum=Integer.parseInt(officialReceiptField.getText());                        }                        try{                            System.out.println("Settling transaction id: \t" +settle.getParent().getId());                            pay(id, Double.parseDouble(amountPaidField.getText()), orNum, remarksField.getText());                            populateTodayVboxContainer();                            success=new Notifications("Success!", "The payment is recorded successfully.");                            success.showInformation();                            reloadVboxContainer();                        }catch (Exception e){                            error=new Notifications("Input error!","Payment field should not be empty");                            error.showError();                        }                    }                });                ledgerView.setOnAction(new EventHandler<ActionEvent>() {                    @Override public void handle(ActionEvent event) {                        System.out.println("Viewing Ledger id: \t\t\t" +ledgerView.getParent().getId());                        Stage ledger = new Stage();                        try{                            Parent root = FXMLLoader.load(getClass().getResource("../Views/Ledger.fxml"));                            ledger.setTitle("Individual Ledger");                            ledger.setScene(new Scene(root));                            ledger.setMaximized(true);                            ledger.show();                        }catch (Exception e){                            System.out.println(e.getMessage());                            e.printStackTrace();                        }                    }                });            }            getTransactions.close();        }catch (Exception e){            System.out.println(e.getMessage());            System.out.println(e.getCause());            e.printStackTrace();        }    }    private void populateTomorrowVboxContainer(){        LocalDate tomorrow=LocalDate.now().plusDays(1);        Text todayText=new Text("Due Tomorrow -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");        todayText.setFont(Font.font("verdana", FontWeight.BOLD, FontPosture.REGULAR, 16));        //containerVbox.getChildren().clear();        containerVbox.getChildren().add(todayText);        try{            ConnectionClass getTransactions=new ConnectionClass();            rs = getTransactions.select("SELECT payment.id, Loan_Account_id, concat(client.first_name,' ', client.last_name) as client_name, concat(employee.first_name,' ', employee.last_name) as employee_name, payment.date,\n" +                    "payment.amount_due, payment.penalty\n" +                    "FROM lending_management_system.loan_account\n" +                    "JOIN lending_management_system.client\n" +                    "ON loan_account.Client_id=client.id\n" +                    "JOIN lending_management_system.payment\n" +                    "ON payment.Loan_Account_id=loan_account.id\n" +                    "JOIN lending_management_system.collector\n" +                    "ON payment.Collector_id=collector.id\n" +                    "JOIN lending_management_system.employee\n" +                    "ON collector.Employee_id=employee.id\n" +                    " WHERE payment.status='pending' AND payment.date = '"+tomorrow+"' AND loan_account.status='active';");            while(rs.next()){                Region space=new Region();                HBox container = new HBox();                Label loanInfoLabel=new Label();                TextField amountPaidField=new TextField();                amountPaidField.setAlignment(Pos.CENTER);                amountPaidField.setPromptText("Payment");                TextField officialReceiptField=new TextField();                officialReceiptField.setAlignment(Pos.CENTER);                officialReceiptField.setPromptText("Receipt");                TextField remarksField=new TextField();                remarksField.setAlignment(Pos.CENTER);                remarksField.setPromptText("Remarks");                Button pass=new Button("Pass");                Button settle=new Button("Settle");                Button ledgerView=new Button("Ledger");                remarksField.setPrefWidth(110);                amountPaidField.setPrefWidth(100);                officialReceiptField.setPrefWidth(80);                pass.setPrefWidth(60);                settle.setPrefWidth(60);                ledgerView.setPrefWidth(70);                space.setPrefWidth(20);                container.setAlignment(Pos.CENTER_LEFT);                container.setSpacing(10.0);                container.setPadding(new Insets(20,20,20,20));                container.setBackground(new Background(new BackgroundFill(Color.WHITE,                        CornerRadii.EMPTY,                        Insets.EMPTY)));                container.prefWidthProperty().bind(containerVbox.widthProperty());                containerVbox.setFillWidth(true);                transaction=new Transaction(rs.getInt("id"), rs.getInt("Loan_Account_id"), rs.getString("client_name"), rs.getString("employee_name"), rs.getDate("date").toLocalDate(), rs.getDouble("amount_due"),  rs.getDouble("penalty"));                container.setId(transaction.getId()+"");                TextField field=amountPaidField;                loanInfoLabel.setText(String.format("ID: %0$-5d\t Loan ID: %0$-5d\t Name: %0$-30s\t Assigned: %0$-30s\t Scheduled Date: %0$-10s\t\t Amort: %.2f\t\t",transaction.getId(), transaction.getLoanId(), transaction.getAccountName(), transaction.getAssignedEmployee(), transaction.getScheduledDate(), transaction.getAmountDue(), transaction.getPenalty()));                container.getChildren().addAll(loanInfoLabel, amountPaidField, officialReceiptField, remarksField, space, settle, pass, ledgerView );                containerVbox.getChildren().add(new HBox(container));                pass.setOnAction(new EventHandler<ActionEvent>() {                    @Override public void handle(ActionEvent event) {                        int id=Integer.parseInt(pass.getParent().getId());                        System.out.println("Passing transaction id: \t" +id+" Due Date: \t"+getScheduledDate(id)+" Due Amount: \t"+getDueAmount(id));                        try{                            pass(id, remarksField.getText());                            success=new Notifications("Success!", "The schedule was passed successfully.");                            success.showInformation();                            reloadVboxContainer();                        }catch (Exception e){                            System.out.println(e.getMessage());                            e.printStackTrace();                            error=new Notifications("Error",e.getMessage());                            error.showError();                        }                    }                });                settle.setOnAction(new EventHandler<ActionEvent>() {                    @Override public void handle(ActionEvent event) {                        Node parent=settle.getParent();                        int id=Integer.parseInt(parent.getId());                        int orNum;                        if(officialReceiptField.getText().equals("")){                            orNum=0;                        }else{                            orNum=Integer.parseInt(officialReceiptField.getText());                        }                        try{                            System.out.println("Settling transaction id: \t" +settle.getParent().getId());                            pay(id, Double.parseDouble(amountPaidField.getText()), orNum, remarksField.getText());                            populateTodayVboxContainer();                            success=new Notifications("Success!", "The payment is recorded successfully.");                            success.showInformation();                            reloadVboxContainer();                        }catch (Exception e){                            error=new Notifications("Input error!","Payment field should not be empty");                            error.showError();                        }                    }                });                ledgerView.setOnAction(new EventHandler<ActionEvent>() {                    @Override public void handle(ActionEvent event) {                        System.out.println("Viewing Ledger id: \t\t\t" +ledgerView.getParent().getId());                        Stage ledger = new Stage();                        try{                            Parent root = FXMLLoader.load(getClass().getResource("../Views/Ledger.fxml"));                            ledger.setTitle("Individual Ledger");                            ledger.setScene(new Scene(root));                            ledger.setMaximized(true);                            ledger.show();                        }catch (Exception e){                            System.out.println(e.getMessage());                            e.printStackTrace();                        }                    }                });            }            getTransactions.close();        }catch (Exception e){            System.out.println(e.getMessage());            System.out.println(e.getCause());            e.printStackTrace();        }    }    private void populateThisWeekVboxContainer(){        LocalDate tomorrow=LocalDate.now().plusDays(1);        Text todayText=new Text("Due This Week -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");        todayText.setFont(Font.font("verdana", FontWeight.BOLD, FontPosture.REGULAR, 16));        //containerVbox.getChildren().clear();        containerVbox.getChildren().add(todayText);        try{            ConnectionClass getTransactions=new ConnectionClass();            rs = getTransactions.select("SELECT payment.id, Loan_Account_id, concat(client.first_name,' ', client.last_name) as client_name, concat(employee.first_name,' ', employee.last_name) as employee_name, payment.date,\n" +                    "payment.amount_due, payment.penalty\n" +                    "FROM lending_management_system.loan_account\n" +                    "JOIN lending_management_system.client\n" +                    "ON loan_account.Client_id=client.id\n" +                    "JOIN lending_management_system.payment\n" +                    "ON payment.Loan_Account_id=loan_account.id\n" +                    "JOIN lending_management_system.collector\n" +                    "ON payment.Collector_id=collector.id\n" +                    "JOIN lending_management_system.employee\n" +                    "ON collector.Employee_id=employee.id\n" +                    " WHERE payment.status='pending' " +                    "AND WEEK(`date`, 1) = WEEK(CURRENT_DATE(), 1) AND payment.date != curdate() AND payment.date != '"+tomorrow+"' AND payment.date > curdate() AND loan_account.status='active' ORDER BY date ASC;");            while(rs.next()){                Region space=new Region();                HBox container = new HBox();                Label loanInfoLabel=new Label();                TextField amountPaidField=new TextField();                amountPaidField.setAlignment(Pos.CENTER);                amountPaidField.setPromptText("Payment");                TextField officialReceiptField=new TextField();                officialReceiptField.setAlignment(Pos.CENTER);                officialReceiptField.setPromptText("Receipt");                TextField remarksField=new TextField();                remarksField.setAlignment(Pos.CENTER);                remarksField.setPromptText("Remarks");                Button pass=new Button("Pass");                Button settle=new Button("Settle");                Button ledgerView=new Button("Ledger");                remarksField.setPrefWidth(110);                amountPaidField.setPrefWidth(100);                officialReceiptField.setPrefWidth(80);                pass.setPrefWidth(60);                settle.setPrefWidth(60);                ledgerView.setPrefWidth(70);                space.setPrefWidth(20);                container.setAlignment(Pos.CENTER_LEFT);                container.setSpacing(10.0);                container.setPadding(new Insets(20,20,20,20));                container.setBackground(new Background(new BackgroundFill(Color.WHITE,                        CornerRadii.EMPTY,                        Insets.EMPTY)));                container.prefWidthProperty().bind(containerVbox.widthProperty());                containerVbox.setFillWidth(true);                transaction=new Transaction(rs.getInt("id"), rs.getInt("Loan_Account_id"), rs.getString("client_name"), rs.getString("employee_name"), rs.getDate("date").toLocalDate(), rs.getDouble("amount_due"),  rs.getDouble("penalty"));                container.setId(transaction.getId()+"");                TextField field=amountPaidField;                loanInfoLabel.setText(String.format("ID: %0$-5d\t Loan ID: %0$-5d\t Name: %0$-30s\t Assigned: %0$-30s\t Scheduled Date: %0$-10s\t\t Amort: %.2f\t\t",transaction.getId(), transaction.getLoanId(), transaction.getAccountName(), transaction.getAssignedEmployee(), transaction.getScheduledDate(), transaction.getAmountDue(), transaction.getPenalty()));                container.getChildren().addAll(loanInfoLabel, amountPaidField, officialReceiptField, remarksField, space, settle, pass, ledgerView );                containerVbox.getChildren().add(new HBox(container));                pass.setOnAction(new EventHandler<ActionEvent>() {                    @Override public void handle(ActionEvent event) {                        int id=Integer.parseInt(pass.getParent().getId());                        System.out.println("Passing transaction id: \t" +id+" Due Date: \t"+getScheduledDate(id)+" Due Amount: \t"+getDueAmount(id));                        try{                            pass(id, remarksField.getText());                            success=new Notifications("Success!", "The schedule was passed successfully.");                            success.showInformation();                            reloadVboxContainer();                        }catch (Exception e){                            System.out.println(e.getMessage());                            e.printStackTrace();                            error=new Notifications("Error",e.getMessage());                            error.showError();                        }                    }                });                settle.setOnAction(new EventHandler<ActionEvent>() {                    @Override public void handle(ActionEvent event) {                        Node parent=settle.getParent();                        int id=Integer.parseInt(parent.getId());                        int orNum;                        if(officialReceiptField.getText().equals("")){                            orNum=0;                        }else{                            orNum=Integer.parseInt(officialReceiptField.getText());                        }                        try{                            System.out.println("Settling transaction id: \t" +settle.getParent().getId());                            pay(id, Double.parseDouble(amountPaidField.getText()), orNum, remarksField.getText());                            populateTodayVboxContainer();                            success=new Notifications("Success!", "The payment is recorded successfully.");                            success.showInformation();                            reloadVboxContainer();                        }catch (Exception e){                            error=new Notifications("Input error!","Payment field should not be empty");                            error.showError();                        }                    }                });                ledgerView.setOnAction(new EventHandler<ActionEvent>() {                    @Override public void handle(ActionEvent event) {                        System.out.println("Viewing Ledger id: \t\t\t" +ledgerView.getParent().getId());                        Stage ledger = new Stage();                        try{                            Parent root = FXMLLoader.load(getClass().getResource("../Views/Ledger.fxml"));                            ledger.setTitle("Individual Ledger");                            ledger.setScene(new Scene(root));                            ledger.setMaximized(true);                            ledger.show();                        }catch (Exception e){                            System.out.println(e.getMessage());                            e.printStackTrace();                        }                    }                });            }            getTransactions.close();        }catch (Exception e){            System.out.println(e.getMessage());            System.out.println(e.getCause());            e.printStackTrace();        }    }    private void populateLatePaymentVboxContainer(){        LocalDate dateNow=LocalDate.now();        Text todayText=new Text("Late Payments -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");        todayText.setFont(Font.font("verdana", FontWeight.BOLD, FontPosture.REGULAR, 16));        containerVbox.getChildren().clear();        containerVbox.getChildren().add(todayText);        try{            ConnectionClass getTransactions=new ConnectionClass();            rs = getTransactions.select("SELECT payment.id, Loan_Account_id, concat(client.first_name,' ', client.last_name) as client_name, concat(employee.first_name,' ', employee.last_name) as employee_name, payment.date,\n" +                    "payment.amount_due, payment.penalty\n" +                    "FROM lending_management_system.loan_account\n" +                    "JOIN lending_management_system.client\n" +                    "ON loan_account.Client_id=client.id\n" +                    "JOIN lending_management_system.payment\n" +                    "ON payment.Loan_Account_id=loan_account.id\n" +                    "JOIN lending_management_system.collector\n" +                    "ON payment.Collector_id=collector.id\n" +                    "JOIN lending_management_system.employee\n" +                    "ON collector.Employee_id=employee.id\n" +                    " WHERE payment.status='pending' " +                    "AND payment.date < '"+dateNow+"' AND loan_account.status='active' ORDER BY date ASC;");            while(rs.next()){                Region space=new Region();                HBox container = new HBox();                Label loanInfoLabel=new Label();                TextField amountPaidField=new TextField();                amountPaidField.setAlignment(Pos.CENTER);                amountPaidField.setPromptText("Payment");                TextField officialReceiptField=new TextField();                officialReceiptField.setAlignment(Pos.CENTER);                officialReceiptField.setPromptText("Receipt");                TextField remarksField=new TextField();                remarksField.setAlignment(Pos.CENTER);                remarksField.setPromptText("Remarks");                Button pass=new Button("Pass");                Button settle=new Button("Settle");                Button ledgerView=new Button("Ledger");                remarksField.setPrefWidth(110);                amountPaidField.setPrefWidth(100);                officialReceiptField.setPrefWidth(80);                pass.setPrefWidth(60);                settle.setPrefWidth(60);                ledgerView.setPrefWidth(70);                space.setPrefWidth(20);                container.setAlignment(Pos.CENTER_LEFT);                container.setSpacing(10.0);                container.setPadding(new Insets(20,20,20,20));                container.setBackground(new Background(new BackgroundFill(Color.WHITE,                        CornerRadii.EMPTY,                        Insets.EMPTY)));                container.prefWidthProperty().bind(containerVbox.widthProperty());                containerVbox.setFillWidth(true);                transaction=new Transaction(rs.getInt("id"), rs.getInt("Loan_Account_id"), rs.getString("client_name"), rs.getString("employee_name"), rs.getDate("date").toLocalDate(), rs.getDouble("amount_due"),  rs.getDouble("penalty"));                container.setId(transaction.getId()+"");                TextField field=amountPaidField;                loanInfoLabel.setText(String.format("ID: %0$-5d\t Loan ID: %0$-5d\t Name: %0$-30s\t Assigned: %0$-30s\t Scheduled Date: %0$-10s\t\t Amort: %.2f\t\t",transaction.getId(), transaction.getLoanId(), transaction.getAccountName(), transaction.getAssignedEmployee(), transaction.getScheduledDate(), transaction.getAmountDue(), transaction.getPenalty()));                container.getChildren().addAll(loanInfoLabel, amountPaidField, officialReceiptField, remarksField, space, settle, pass, ledgerView );                containerVbox.getChildren().add(new HBox(container));                pass.setOnAction(new EventHandler<ActionEvent>() {                    @Override public void handle(ActionEvent event) {                        int id=Integer.parseInt(pass.getParent().getId());                        System.out.println("Passing transaction id: \t" +id+" Due Date: \t"+getScheduledDate(id)+" Due Amount: \t"+getDueAmount(id));                        try{                            pass(id, remarksField.getText());                            success=new Notifications("Success!", "The schedule was passed successfully.");                            success.showInformation();                        }catch (Exception e){                            System.out.println(e.getMessage());                            e.printStackTrace();                            error=new Notifications("Error",e.getMessage());                            error.showError();                        }                        reloadVboxContainer();                    }                });                settle.setOnAction(new EventHandler<ActionEvent>() {                    @Override public void handle(ActionEvent event) {                        Node parent=settle.getParent();                        int id=Integer.parseInt(parent.getId());                        int orNum;                        if(officialReceiptField.getText().equals("")){                            orNum=0;                        }else{                            orNum=Integer.parseInt(officialReceiptField.getText());                        }                        try{                            System.out.println("Settling transaction id: \t" +settle.getParent().getId());                            pay(id, Double.parseDouble(amountPaidField.getText()), orNum, remarksField.getText());                            populateTodayVboxContainer();                            success=new Notifications("Success!", "The payment is recorded successfully.");                            success.showInformation();                            reloadVboxContainer();                        }catch (Exception e){                            error=new Notifications("Input error!","Payment field should not be empty");                            error.showError();                        }                    }                });                ledgerView.setOnAction(new EventHandler<ActionEvent>() {                    @Override public void handle(ActionEvent event) {                        System.out.println("Viewing Ledger id: \t\t\t" +ledgerView.getParent().getId());                        Stage ledger = new Stage();                        try{                            Parent root = FXMLLoader.load(getClass().getResource("../Views/Ledger.fxml"));                            ledger.setTitle("Individual Ledger");                            ledger.setScene(new Scene(root));                            ledger.setMaximized(true);                            ledger.show();                        }catch (Exception e){                            System.out.println(e.getMessage());                            e.printStackTrace();                        }                    }                });            }            getTransactions.close();        }catch (Exception e){            System.out.println(e.getMessage());            System.out.println(e.getCause());            e.printStackTrace();        }    }    private void reloadVboxContainer(){        populateLatePaymentVboxContainer();        populateTodayVboxContainer();        populateTomorrowVboxContainer();        populateThisWeekVboxContainer();    }    private void pay(int accountID, double amount, int receiptNumber, String remarks){        double penaltyRate=getLoanPenaltyRate(accountID);        double oldBalance=getAccountBalance(accountID);        double newBalance=oldBalance-amount;        double dueAmount=getDueAmount(accountID);        double newDueAmount=0;        double penalty=0;        String status="";        double excess;        LocalDate scheduledDate= getScheduledDate(accountID);        LocalDate today=LocalDate.now();        if(today.isBefore(scheduledDate)){            status="advance";        }else if(today.isEqual(scheduledDate)){            status="on time";        }else if(today.isAfter(scheduledDate)){            status="late";            penalty=dueAmount*penaltyRate;        }        double oldPenalty=getAccountPenalty(accountID);        double newPenalty=oldPenalty+penalty;        if(amount>dueAmount){            excess=amount-dueAmount;        }else{            excess=0;        }        try{ //fix this piece of shit            ConnectionClass transact =new ConnectionClass();            if(newBalance<dueAmount){                newDueAmount=newBalance;                transact.update("UPDATE lending_management_system.payment\n" +                        "SET amount_due ='"+newDueAmount+"'\n" +                        "WHERE payment.id = '"+(accountID+1)+"';\n");            }            transact.update("UPDATE lending_management_system.payment\n" +                    "SET amount_paid = '"+amount+"', excess = '"+excess+"', balance = '"+newBalance+"', penalty = '"+Math.round(penalty*100.0)/100.0+"', payment_date = '"+today+"', status = '"+status+"', official_reciept_number = '"+receiptNumber+"', remarks = '"+remarks+"'\n" +                    "WHERE payment.id = '"+accountID+"';\n");            transact.update("UPDATE lending_management_system.loan_account\n" +                    "JOIN lending_management_system.payment\n" +                    "ON payment.Loan_Account_id=loan_account.id\n" +                    "SET loan_account.balance='"+newBalance+"', loan_account.penalty='"+Math.round(newPenalty*100.0)/100.0+"'\n " +                    "WHERE payment.id='"+accountID+"';");            transact.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }    }    private void pass(int passedPaymentID,String remarks){        double penaltyRate=getLoanPenaltyRate(passedPaymentID);        double passedAmount=getDueAmount(passedPaymentID);        double penalty=passedAmount*penaltyRate;        double oldPenalty=getAccountPenalty(passedPaymentID);        double newPenalty=oldPenalty+penalty;        try{            ConnectionClass transact =new ConnectionClass();            transact.update("UPDATE lending_management_system.payment\n" +                    "SET amount_paid = '0', excess = '0', penalty = '"+Math.round(penalty*100.0)/100.0+"', status = 'passed', remarks = '"+remarks+"'\n" +                    "WHERE payment.id = '"+passedPaymentID+"';\n");            transact.update("UPDATE lending_management_system.loan_account\n" +                    "JOIN lending_management_system.payment\n" +                    "ON payment.Loan_Account_id=loan_account.id\n" +                    "SET loan_account.penalty='"+Math.round(newPenalty*100.0)/100.0+"'\n " +                    "WHERE payment.id='"+passedPaymentID+"';");            transact.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }    }    private LocalDate getScheduledDate(int transactionID){        LocalDate dueDate = null;        try{            ConnectionClass getDueDate =new ConnectionClass();            rs=getDueDate.select(String.format("SELECT date as date_scheduled " +                    "FROM lending_management_system.payment\n" +                    "WHERE id='%d';",transactionID));            while(rs.next()){                dueDate=rs.getDate("date_scheduled").toLocalDate();            }            getDueDate.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        return dueDate;    }    private double getDueAmount(int transactionID){        double dueAmount = 0;        try{            ConnectionClass getAmountDue =new ConnectionClass();            rs=getAmountDue.select(String.format("SELECT payment.amount_due\n" +                    "FROM lending_management_system.payment\n" +                    "WHERE id='%d';",transactionID));            while(rs.next()){                dueAmount=rs.getDouble("amount_due");            }            getAmountDue.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        return dueAmount;    }    private double getAccountBalance(int transactionID){        double balance=0;        try{            ConnectionClass selectLoanBalance=new ConnectionClass();            rs=selectLoanBalance.select(String.format("SELECT loan_account.balance\n" +                    "FROM lending_management_system.loan_account\n" +                    "JOIN lending_management_system.payment\n" +                    "ON payment.Loan_Account_id=loan_account.id\n" +                    "WHERE payment.id='%d';",transactionID));            while(rs.next()){                balance=rs.getDouble("balance");            }            selectLoanBalance.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        return balance;    }    private float getLoanPenaltyRate(int transactionID){        float rate=0;        try{            ConnectionClass getLoanPenaltyRate=new ConnectionClass();            rs=getLoanPenaltyRate.select(String.format("SELECT loan_type.penalty_rate\n" +                    "FROM lending_management_system.loan_account\n" +                    "JOIN lending_management_system.payment\n" +                    "ON payment.Loan_Account_id=loan_account.id\n" +                    "JOIN lending_management_system.loan_type\n" +                    "ON loan_account.Loan_Type_id=loan_type.id\n" +                    "WHERE payment.id='%d';",transactionID));            while(rs.next()){                rate=rs.getFloat("penalty_rate");            }            getLoanPenaltyRate.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        return rate;    }    private double getAccountPenalty(int transactionID){        double penalty=0;        try{            ConnectionClass selectLoanPenalty=new ConnectionClass();            rs=selectLoanPenalty.select(String.format("SELECT loan_account.penalty\n" +                    "FROM lending_management_system.loan_account\n" +                    "JOIN lending_management_system.payment\n" +                    "ON payment.Loan_Account_id=loan_account.id\n" +                    "WHERE payment.id='%d';",transactionID));            while(rs.next()){                penalty=rs.getDouble("penalty");            }                        selectLoanPenalty.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        return penalty;    }    //EMPLOYEE EVENTS    @FXML    void employeeDeleteButtonClicked(ActionEvent event) {    }    @FXML    void employeesTableClicked(MouseEvent event) {        getSelectedEmployee();    }    @FXML    void employeeSaveButtonClicked(ActionEvent event) {    }    @FXML    void employeeUpdateButtonClicked(ActionEvent event) {    }    //EMPLOYEE METHODS    private void populateEmployeeTable(){        ObservableList<Employee> employeesList=FXCollections.observableArrayList();        try{            ConnectionClass getEmployees=new ConnectionClass();            rs=getEmployees.select("SELECT * FROM lending_management_system.employee;");            while(rs.next()){                employeesList.add(new Employee(rs.getInt("id"),rs.getString("last_name"),rs.getString("first_name"),rs.getString("middle_name"),rs.getString("address"),"0"+rs.getString("contact_number"),rs.getString("position"),rs.getString("status")));            }            getEmployees.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        employeeIDColumn.setCellValueFactory(new PropertyValueFactory<Employee, Integer>("id"));        employeeLastnameColumn.setCellValueFactory(new PropertyValueFactory<Employee, String>("lastName"));        employeeFirstnameColumn.setCellValueFactory(new PropertyValueFactory<Employee, String>("firstName"));        employeeMiddleNameColumn.setCellValueFactory(new PropertyValueFactory<Employee, String>("middleName"));        employeeAddressColumn.setCellValueFactory(new PropertyValueFactory<Employee, String>("address"));        employeeContactColumn.setCellValueFactory(new PropertyValueFactory<Employee, String>("contactNumber"));        employeePositionColumn.setCellValueFactory(new PropertyValueFactory<Employee, String>("position"));        employeeTable.setItems(employeesList);    }    private void getSelectedEmployee(){        Employee employee=employeeTable.getSelectionModel().getSelectedItem();        selectedEmployeeID=employee.getId();        employeeLastname.setText(employee.getLastName());        employeeFirstname.setText(employee.getFirstName());        employeeMiddlename.setText(employee.getMiddleName());        employeeAddress.setText(employee.getAddress());        employeeContactNumber.setText(employee.getContactNumber());        employeePositionComboBox.setValue(employee.getPosition());    }    //SERVICES METHODS    private void populateServicesTable(){        ObservableList<LoanType> servicesList=FXCollections.observableArrayList();        try{            ConnectionClass getServices=new ConnectionClass();            rs=getServices.select("SELECT * FROM lending_management_system.loan_type;");            while(rs.next()){                servicesList.add(new LoanType(rs.getInt("id"),rs.getString("description"),rs.getFloat("rate"),rs.getFloat("penalty_rate"),rs.getString("status")));                }            getServices.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        servicesLoanTypeIDColumn.setCellValueFactory(new PropertyValueFactory<LoanType, Integer>("id"));        servicesDescriptionColumn.setCellValueFactory(new PropertyValueFactory<LoanType, String>("description"));        servicesInterestRateColumn.setCellValueFactory(new PropertyValueFactory<LoanType, Float>("rate"));        servicesPenaltyRateColumn.setCellValueFactory(new PropertyValueFactory<LoanType, Float>("penaltyRate"));        servicesStatusColumn.setCellValueFactory(new PropertyValueFactory<LoanType, String>("status"));        servicesTable.setItems(servicesList);    }    private void getSelectedService(){        LoanType selectedLoanType;        selectedLoanType=servicesTable.getSelectionModel().getSelectedItem();        selectedServiceID=selectedLoanType.getId();        servicesLoanDescription.setText(selectedLoanType.getDescription());        servicesInterestRate.setText(selectedLoanType.getRate()+"");        servicesPenaltyRate.setText(selectedLoanType.getPenaltyRate()+"");        servicesStatusComboBox.setValue(selectedLoanType.getStatus());    }    //USER METHODS    private void populateUserTable(){        ObservableList<UserAccount> usersList=FXCollections.observableArrayList();        UserAccount user;        try{            ConnectionClass getServices=new ConnectionClass();            rs=getServices.select("SELECT user_account.id, employee.first_name, employee.last_name, \n" +                    "user_account.username, user_account.password, user_account.admin\n" +                    "FROM lending_management_system.employee\n" +                    "JOIN lending_management_system.user_account\n" +                    "ON user_account.Employee_id=employee.id;");            while(rs.next()){                user=new UserAccount();                user.setId(rs.getInt("id"));                user.setFirstName(rs.getString("first_name"));                user.setLastName(rs.getString("last_name"));                //user.setFullName(user.getFirstName()+" "+user.getLastName());                user.setUsername(rs.getString("username"));                user.setPassword(rs.getString("password"));                user.setAdmin(rs.getBoolean("admin"));                usersList.add(user);            }            getServices.close();        }catch (Exception e){            System.out.println(e.getMessage());            e.printStackTrace();        }        userIDColumn.setCellValueFactory(new PropertyValueFactory<UserAccount, Integer>("id"));        userFullnameColumn.setCellValueFactory(new PropertyValueFactory<UserAccount, String>("fullName"));        usernameColumn.setCellValueFactory(new PropertyValueFactory<UserAccount, String>("username"));        passwordColumn.setCellValueFactory(new PropertyValueFactory<UserAccount, String>("password"));        userAdminColumn.setCellValueFactory(new PropertyValueFactory<UserAccount, Boolean>("admin"));        userTable.setItems(usersList);    }    private void getSelectedUser(){        UserAccount selectedUser=userTable.getSelectionModel().getSelectedItem();        selectedUserID=selectedUser.getId();        userEmployeeComboBox.setValue(selectedUser.getFullName());        usernameField.setText(selectedUser.getUsername());        passwordField.setText(selectedUser.getPassword());        adminRadioButton.setSelected(selectedUser.isAdmin());    }    @Override    public void initialize(URL location, ResourceBundle resources) {        addNodes();        dashboardButton.fire();    }}